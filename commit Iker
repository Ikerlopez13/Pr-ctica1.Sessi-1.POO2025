package Sessió1;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Random;
import jconsole.JConsole;

public class asda {
    enum Estat { Sembrat, Nascut, Florit }

    public static void main(String[] args) {
        JConsole console = new JConsole(160, 40);

        int fila, columna, contRegs = 0;
        int filaReg, columnaReg;
        int florides = 0;

        String textFila, textColumna, textRegarFila, textRegarColumna;

        textFila = "Indica quantes files té el taulell: ";
        textColumna = "Indica quantes columnes té el taulell: ";
        textRegarFila = "Indica la fila de la component a regar ";
        textRegarColumna = "Indica la columna de la component a regar ";

        fila = llegirValor(3, 10, textFila, console);
        columna = llegirValor(3, 10, textColumna, console);
        
        Estat jardiMinim[][] = new Estat[fila][columna];
        Estat jardi[][] = new Estat[fila][columna];
        
        florides = sembrarJardi(jardi);
        visualitza(jardi, console);
        
        console.println();
        
        console.println("Comença el joc. Aniràs indicant les components que vols regar");
        console.println("--------------------------------------------------------------");
        
        // Cambiamos el array fijo por un ArrayList
        ArrayList<Integer> vecFlors = new ArrayList<>();
        int menysFlorsIndex = 0;
        int menysFlorsValue = Integer.MAX_VALUE;
        
        while (!acabar(jardi)) {
            filaReg = llegirValor(0, fila-1, textRegarFila, console);
            columnaReg = llegirValor(0, columna-1, textRegarColumna, console);
            
            int florsAbansReg = florides;
            florides = regar(jardi, filaReg, columnaReg, florides, console);
            
            vecFlors.add(florides);
            
            // Trackear el reg con menos flores
            int florsAfegides = florides - florsAbansReg;
            if (florsAfegides < menysFlorsValue) {
                menysFlorsValue = florsAfegides;
                menysFlorsIndex = vecFlors.size() - 1;
            }
            
            console.println("El reg de la component (" + filaReg + "," + columnaReg + ") provoca els següents canvis al jardí");
            visualitza(jardi, console);
            contRegs++;
        }
        
        console.println("Guanyat!!!!!");
        console.println("Dades finals:");
        console.println("Número de regs: " + vecFlors.size());

        console.println("Número de tulipes florides després de cada reg:");
        for (int i = 0; i < vecFlors.size(); i++) {
            console.println("Reg " + (i+1) + ": " + vecFlors.get(i) + " flors");
        }

        console.println("Reg amb menys flors: Reg " + (menysFlorsIndex + 1) + 
                        " amb " + (vecFlors.get(menysFlorsIndex) - 
                        (menysFlorsIndex > 0 ? vecFlors.get(menysFlorsIndex-1) : 0)) + " flors noves");
    }
    
    private static int llegirValor(int minim, int maxim, String text, JConsole console) {
		int valor;
		console.println(text);

		console.setForegroundColor(Color.GREEN);
		valor = console.readInt();
		while (valor<minim || valor>maxim) {
			console.setForegroundColor(Color.RED);
			console.print("El valor entrat està fora de l'interval (ha d'estar entre 3 i 10)");
			console.println();
			console.setForegroundColor(Color.GREEN);
			valor = console.readInt();
		}
		console.resetColor();
		return valor;

	}

    private static int sembrarJardi(Estat jardi[][]) {
        int valor;
        int florides = 0;

        Random aleatori = new Random();

        do {
            florides = 0;
            for (int i = 0; i < jardi.length; i++) {
                for (int j = 0; j < jardi[0].length; j++) {
                    valor = aleatori.nextInt(1, 4);
                    if (valor == 1) {
                        jardi[i][j] = Estat.Sembrat;
                    } else if (valor == 2) {
                        jardi[i][j] = Estat.Nascut;
                    } else if (valor == 3) {
                        jardi[i][j] = Estat.Florit;
                        florides++;
                    }
                }
            }
        } while (florides == jardi.length * jardi[0].length);

        return florides;
    }

	private static void canviarEstat(Estat[][]jardi, int fila, int col, JConsole console) {
		
				if(jardi[fila][col]== Estat.Sembrat) {
					jardi [fila][col] = Estat.Nascut;
				} 
				
				else if(jardi[fila][col] == Estat.Nascut) {
					jardi [fila][col] = Estat.Florit;
				} 
				
				else if(jardi[fila][col] == Estat.Florit){
					jardi [fila][col] = Estat.Sembrat;
				}
	}


	private static boolean acabar(Estat[][]taulell) {
		for (int i = 0; i<taulell.length;i++) {
			for (int j = 0; j<taulell[0].length;j++) {
				if (taulell [i][j]!= Estat.Florit) {
					return false;
				}
			}
		} 
		return true;
	}

	private static int regar(Estat[][]taulell, int fil, int col, int florides, JConsole console) {
	    int contadorFlorit = 0;
	    
	    for (int i = 0; i<taulell.length;i++) {
	        for (int j = 0; j<taulell[0].length;j++) {
	            if(i==fil || j == col) {
	                canviarEstat(taulell, i, j, console);
	            }
	        }
	    } 
	    for (int i = 0; i<taulell.length;i++) {
	        for (int j = 0; j<taulell[0].length;j++) {
	            if(taulell[i][j] == Estat.Florit) {
	                contadorFlorit++;
	            }
	        }
	    }
	    
	    return contadorFlorit;
	}

	private static void visualitza(Estat[][] t, JConsole console) {
		for (int i = 0; i<t.length;i++) {
			for (int j = 0; j<t[0].length;j++) {

				console.print(t[i][j]+"\t");

			}
			console.println();
		}
	}


}
